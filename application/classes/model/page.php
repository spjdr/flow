<?php defined('SYSPATH') or die('No direct script access.');class Model_Page extends ORM { 	 	// Relationships	protected $_belongs_to = array(		'user' => array('model' => 'user')	);		protected $_rules = array(		'uri' => array(			'not_empty'		=> NULL,			'min_length' 	=> array(2),			'max_length' 	=> array(255),			'regex' 		=> array('/^[-\pL\pN_.]++$/uD')		),		'title' => array(			'not_empty'  	=> NULL,			'min_length' 	=> array(2),			'max_length' 	=> array(50)		),		'body' => array(			'not_empty'	=> NULL		),		'user_id' => array(			'not_empty' => NULL		),		'created_timestamp' => array(			'not_empty' => NULL		)	);  	// Validation callbacks	protected $_callbacks = array(		'uri' => array('uri_available')	); 	public function validate(& $array) 	{		// Initialise the validation library and setup some rules				$array = Validate::factory($array)						->rules('uri', $this->_rules['uri'])						->rules('title', $this->_rules['title'])						->rules('body', $this->_rules['body'])						->rules('user_id', $this->_rules['user_id'])						->filter('uri', 'trim')						//->filter('title', 'trim',array('html','chars'))						->filter('body', 'trim'); 		#Executes username callbacks defined in parent				foreach($this->_callbacks['uri'] as $callback){			$array->callback('uri', array($this, $callback));		}  		return $array;	}		/**	 * Does the reverse of unique_key_exists() by triggering error if uri exists.	 * Validation callback.	 *	 * @param   Validate  Validate object	 * @param   string    field name	 * @return  void	 */	public function uri_available(Validate $array, $field)	{		if ($this->unique_key_exists($array[$field], 'uri'))		{			$array->error($field, 'uri_inavailable', array($array[$field]));		}	}		/**	 * Tests if a unique key value exists in the database.	 *	 * @param   mixed    the value to test	 * @param   string   field name	 * @return  boolean	 */	public function unique_key_exists($value, $field)	{		return (bool) DB::select(array('COUNT("*")', 'total_count'))			->from($this->_table_name)			->where($field, '=', $value)			->where($this->_primary_key, '!=', $this->pk())			->execute($this->_db)			->get('total_count');	}		public function unique_key($value)	{		return Validate::numeric($value) ? 'id' : 'uri';	}		public function save() 	{		if (parent::__isset('created_timestamp'))		{			parent::__set('created_timestamp',time());		}				parent::save();	}}