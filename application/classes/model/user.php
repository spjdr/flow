<?php defined('SYSPATH') or die('No direct script access.');class Model_User extends Model_Auth_User { 	 	// Relationships	protected $_has_many = array(		'user_tokens' => array('model' => 'user_token'),		'roles'       => array('model' => 'role', 'through' => 'roles_users'),		'flows' 	  => array('model' => 'flow', 'through' => 'flows_users'),		'streams'	  => array('model' => 'stream', 'through' => 'streams_editors'),		'invitations' => array('model' => 'invitation', 'foreign_key' => 'sender_id')	); 	 	public function __get($key) 	{ 		if ($key == 'name') 		{ 			return parent::__isset('fullname') ? parent::__get('fullname') : parent::__get('username'); 		} 		 		if ($key == 'uri') 		{ 			return '@'.parent::__get('username'); 		} 	 		if ($key == 'directory') 		{ 			return 'files/users/'.parent::__get('id').'/'; 		} 	 		if ($key=='picture') 		{ 			$path = 'files/users/'.parent::__get('id').'/'.parent::__get('username').'_profile_picture.jpg'; 			 			if (file_exists(DOCROOT.$path)) 			{ 				return $path; 			} 			 			return 'files/default/profile_picture.jpg'; 		}		if ($key=='thumbnail')		{			$path = 'files/users/'.parent::__get('id').'/'.parent::__get('username').'_thumbnail_picture.jpg'; 			 			if (file_exists(DOCROOT.$path)) 			{ 				return $path; 			} 			 			return 'files/default/thumbnail_picture.jpg';		}		 		return parent::__get($key); 	}  	public function __contruct($id) 	{ 		parent::__construct($id); 	} 	public function validate_create(& $array) 	{		// Initialise the validation library and setup some rules				$array = Validate::factory($array)						->rules('password', $this->_rules['password'])						->rules('username', $this->_rules['username'])						->rules('email', $this->_rules['email'])						->rules('password_confirm', $this->_rules['password_confirm'])						->filter('username', 'trim')						->filter('email', 'trim')						->filter('password', 'trim')						->filter('password_confirm', 'trim'); 		#Executes username callbacks defined in parent				foreach($this->_callbacks['username'] as $callback){			$array->callback('username', array($this, $callback));		}                 #Executes email callbacks defined in parent			foreach($this->_callbacks['email'] as $callback){			$array->callback('email', array($this, $callback));		}		 		return $array;	}		public function validate_edit(& $array)	{		// Initialise the validation library and setup some rules				$array = Validate::factory($array)						->rules('email', $this->_rules['email'])						->filter('fullname','trim')						->filter('description','trim')						->filter('email', 'trim');  		#Executes email callbacks defined in parent			#foreach($this->_callbacks['email'] as $callback){		#	$array->callback('email', array($this, $callback));		#}		 		return $array;	}	}